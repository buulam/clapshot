pub mod grpc_client;
pub mod unix_socket;
pub mod subprocess;
pub mod caller;
pub mod grpc_server;

pub mod proto {
    // Generated by [`tonic-build`]
    include!(concat!(env!("OUT_DIR"), "/clapshot.organizer.rs"));
    pub const FILE_DESCRIPTOR_SET: &[u8] = include_bytes!(concat!(env!("OUT_DIR"), "/organizer_descriptor.bin"));

    // Generated by [`pbjson-build`]
    include!(concat!(env!("OUT_DIR"), "/clapshot.organizer.serde.rs"));
}


/// Convert database time to protobuf3
pub fn datetime_to_proto3(dt: &chrono::NaiveDateTime) -> pbjson_types::Timestamp {
    pbjson_types::Timestamp {
        seconds: dt.timestamp(),
        nanos: dt.timestamp_subsec_nanos() as i32,
    }
}

/// Convert databaes Video to protobuf3
pub fn db_video_to_proto3(v: &crate::database::models::Video) -> proto::Video {

    let duration = match (v.duration, v.total_frames, &v.fps) {
        (Some(dur), Some(total_frames), Some(fps)) => Some(proto::VideoDuration {
            duration: dur as f64,
            total_frames: total_frames as i64,
            fps: fps.clone(),
        }),
        _ => None,
    };

    let added_by = match (&v.added_by_userid, &v.added_by_username) {
        (Some(user_id), user_name) => Some(proto::UserInfo {
            username: user_id.clone(),
            displayname: user_name.clone(),
        }),
        _ => None,
    };

    let processing_metadata = match (&v.orig_filename, &v.recompression_done, &v.raw_metadata_all.clone()) {
        (Some(orig_filename), recompression_done, ffprobe_metadata_all) => Some(proto::VideoProcessingMetadata {
            orig_filename: orig_filename.clone(),
            recompression_done: recompression_done.map(|t| datetime_to_proto3(&t)),
            ffprobe_metadata_all: ffprobe_metadata_all.clone(),
        }),
        _ => None,
    };

    proto::Video {
        video_hash: v.video_hash.clone(),
        title: v.title.clone(),
        added_by,
        duration,
        added_time: Some(datetime_to_proto3(&v.added_time)),
        preview_data: Some(proto::VideoPreviewData {
            thumb_sheet_dims: v.thumb_sheet_dims.clone(),
        }),
        processing_metadata: processing_metadata,
    }
}


/// Convert a list of database Videos to a protobuf3 PageItem (FolderListing)
pub fn folder_listing_for_videos(videos: &[crate::database::models::Video]) -> proto::PageItem {
    let items = videos.iter().map(|v| {
            let vid = db_video_to_proto3(v);
            proto::page_item::folder_listing::Item {
                item: Some(proto::page_item::folder_listing::item::Item::Video(vid)),
                ..Default::default()
            }
        }).collect();

    proto::PageItem {
        item: Some(proto::page_item::Item::FolderListing(
            proto::page_item::FolderListing {
                items,
        })),
    }
}
